#b'WzAsIDAsIDAsIDAsIDBd'
#^^ FILE IO DATA - DO NOT DELETE OR THINGS BREAK
#replace first line with "#b'WzAsIDAsIDAsIDAsIDBd'" to reset scores.

#pycade by Rani Sargees
#creates a pygame window with the following games
#	snake
#	pong
#	"Gender-Neutral Pac-Person" <-- basically pacman
#takes arrowkey/enter/escape input in the pygame window
#use python 3 + pygame
#i really dont like having dependencies, so EVERYTHING is embedded. EVERYTHING.
import pygame,os
from io import BytesIO
from base64 import b64decode,b64encode
from random import randint as rand
from heapq import heappop, heappush
#Setup sprites/images
def b64ToFile(input): #converts base64 to file-like objects
	return BytesIO(b64decode(input))
#load font
font = ""
#load sounds
#pygame.mixer.pre_init(44100, -16, 2, 512) #fix lag
pygame.mixer.init(frequency = 44100, size = -16, channels = 1, buffer = 2**12)
pong_sound = pygame.mixer.Sound(file=b64ToFile("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KJqmqnJdURRF0zRNVSXLomiKpqmqqgvTNE3TVFXXhWmapmmqquvCtlVVVV3XdWHbqqqqruvKwHVd13VlGciu67quLAsAAE9wAAAqsGF1hJOiscBCQ1YCABkAAIQxCCmEEFLIIKQQQkgphZAAAIABBwCAABPKQKEhKwGAVAAAgBBrrbXWWmsNY9Zaa6211hLnrLXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa621VgAgdoUDwE6EDasjnBSNBRYashIACAcAAIxBiDHoJJRSSoUQY9BJSKW1GCuEGINQSkqttZg85xyEUlpqLcbkOecgpNRajDEm10JIKaWWYouxuBZCKim11mKsyRiVUmotthhr7cWolEpLMcYYazDG5tRajDHWWosxOrcSS4wxxlqEEcbFFmOstdcijBGyxdJarbUGY4yxubXYas25GCOMri21VmvNBQCYPDgAQCXYOMNK0lnhaHChISsBgNwAAAIhpRhjzDnnnHMOQgipUow55xyEEEIIoZRSUqUYc845CCGEUEIppaSMMeYchBBCCKWUUkppKWXMOQghhFBKKaWU0lLrnHMQQgillFJKKSWl1DnnIIRQSimllFJKSi2EEEIooZRSSimllJRSSiGEUEoppZRSSimppZRCCKWUUkoppZRSUkophRBCKaWUUkoppaSUWiullFJKKaWUUkpJLbWUUiillFJKKaWUklpKKaVSSimllFJKKSWl1FJKpZRSSimllFJKS6mllEoppZRSSimllJRSSimlVEoppZRSSikppdRaSimllEoppZRSWmsppZZSKqWUUkoppbTUWmsttZRKKaWUUkpprbWUUkoplVJKKaWUUgAA0IEDAECAEZUWYqcZVx6BIwoZJqBCQ1YCAGQAAAyjlFJJLUWCIqUYpJZCJRVzUFKKKHMOUqypQs4g5iSVijGElINUMgeVUsxBCiFlTCkGrZUYOsaYo5hqKqFjDAAAAEEAAIGQCQQKoMBABgAcICRIAQCFBYYOESJAjAID4+LSBgAgCJEZIhGxGCQmVANFxXQAsLjAkA8AGRobaRcX0GWAC7q460AIQQhCEIsDKCABByfc8MQbnnCDE3SKSh0IAAAAAEADADwAACQbQERENHMcHR4fICEiIyQlJicoAgAAAABgBgAfAABJChAREc0cR4fHB0iIyAhJickJSgAAIIAAAAAAAAggAAEBAQAAAACAAAAAAAEBT2dnUwAEmgMAAAAAAAC8ZgAAAgAAAEI0p2oJO0IxLzQyPEA9zJrlesSf4cQ4a5brEX8GMV41lSJkJqe0uAMk0aIZY3pZhF87RmyTCvQ+gTkViRFD0ZhRS4TRUDEiMgD0qunHJf863AbWq+YfN/XrQANox37S1hoDIMHBDHZDLcplgsBRvUu42HIAxIQwtggMABDsYoQKo5EQQkwMohY2AAAMu9U0/PlRlfy6dX+wf0a6srPFtEqSnBjsBHAu6dngA5YH2xag2EvRSYcwMBAp96cVJLfDNvLPSAK23I7b8EcM4mAUlSLAycQBgHrdGqN1eTvXOGyG7xSfd3u17xhIGQDEquHlTf9g+LFqeHmTPxjfgf0l47AIwO7gYLMYagm8Vw7ASZBSVPB9RJCiu2DnaGQn2LsBJL/tPPoP4SxLftt59J8BzrCDiahNJNI8zwFAxaiINeKL/0a2HLQzBADFdegHRQSEv1PcplEZ9Wekl7tNozLizwin3dnasgwBJ647dwDrxZDUvn6/PvvZ30iSlkBSEERK4LTJqgoYgaKhhDHeIQDElqP7ef9ty7LZcrE/73/asuy4PVJa3AEaa+pgSbKYgekoDoOnffny5cvnZes5gCsahEE0HgahsMLIrhsNHBgAJEZdP+HPfBRpiVLbj/6zrkTjNJmK37kDWC251mjTKrBFGOmk1lYoLK3C8n8AAOGeMUaZKiqKjHA3GmBhAA=="))
pygame.mixer.set_reserved(2)
voice_pacman = pygame.mixer.Channel(0)
voice_ghosts = pygame.mixer.Channel(1)
pac_sound = {
	#intro
	"intro":	pygame.mixer.Sound(file=b64ToFile("")),
	#siren
	"ghost1":	pygame.mixer.Sound(file=b64ToFile("")),
	"ghost4":	pygame.mixer.Sound(file=b64ToFile("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")),
	"ghost5":	pygame.mixer.Sound(file=b64ToFile("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")),
	#eating dot
	"eat":		pygame.mixer.Sound(file=b64ToFile("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")),
	"eat_ghost":pygame.mixer.Sound(file=b64ToFile("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dFI6KRGETEonpZESWgspZZZKiiXGzFqJrcTYSAmthdYyayXG0mJGrcRYYioAAOzAAQDswEIoNGQlAJAHAEAYoxRjzjlnEGLMOQghNAgx5hyEECrGnHMOQggVY845ByGEzjnnIIQQQueccxBCCKGDEEIIpZTSQQghhFJK6SCEEEIppXQQQgihlFIKAAAqcAAACLBRZHOCkaBCQ1YCAHkAAIAxSjknJaVGKcYgpBRboxRjEFJqrWIMQkqtxVgxBiGl1mLsIKTUWoy1dhBSai3GWkNKrcVYa84hpdZirDXX1FqMtebce2otxlpzzrkAANwFBwCwAxtFNicYCSo0ZCUAkAcAQCCkFGOMOYeUYowx55xDSjHGmHPOKcYYc8455xRjjDnnnHOMMeecc845xphzzjnnnHPOOeegg5A555xz0EHonHPOOQghdM455xyEEAoAACpwAAAIsFFkc4KRoEJDVgIA4QAAgDGUUkoppZRSSqijlFJKKaWUUgIhpZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoplVJKKaWUUkoppZRSSimlACDfCgcA/wcbZ1hJOiscDS40ZCUAEA4AABjDGISMOSclpYYxCKV0TkpJJTWMQSilcxJSSimD0FpqpaTSUkoZhJRiCyGVlFoKpbRWaymptZRSKCnFGktKqaXWMuckpJJaS622mDkHpaTWWmqtxRBCSrG11lJrsXVSUkmttdZabS2klFprLcbWYmwlpZZaa6nF1lpMqbUWW0stxtZiS63F2GKLMcYaCwDgbnAAgEiwcYaVpLPC0eBCQ1YCACEBAAQySjnnnIMQQgghUoox56CDEEIIIURKMeacgxBCCCGEjDHnIIQQQgihlJAx5hyEEEIIIYRSOucghFBKCaWUUkrnHIQQQgillFJKCSGEEEIopZRSSikhhBBKKaWUUkopJYQQQiillFJKKaWEEEIopZRSSimllBBCKKWUUkoppZQSQgihlFJKKaWUUkIIpZRSSimllFJKKCGEUkoppZRSSgkllFJKKaWUUkopIZRSSimllFJKKaUAAIADBwCAACPoJKPKImw04cIDEAAAAAIAAkwAgQGC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")),
	"eat_bonus":pygame.mixer.Sound(file=b64ToFile("")),
	#pac FX
	"dead":		pygame.mixer.Sound(file=b64ToFile("")),
	}
#load gender-neutral-pac-person images
HEADER1 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAA" #"compression"
fruit_sprite = [
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAABFUlEQVRIS7WQAXLCMBADwxN5XflcCz8x0tky8tVJ2kCYWcXWXaQMSykLKKcB+VwBfhQczauMi0dg8M/Xtdxv16EEcryAQYLBLCBvFyhUgQxXgYfHbmUM2MKDVSSPz1/7ldFcw4MU5p72HEhMRhPWjFnQmi8gMXkZshJHwgkkpvWia4IhfHoQz3vhBBIb8UK/Nu4IIO5xz8OFhzqQmGKnHXfQ3qzYgwUkJn8q8J1cQGYldUJpx8d3Ccrl8hqD/AGzApJL2oR+PfYCjRq5YI3dApGL3i6Ii65graD76S8UmwVhyDLofawgzLYo5EE7vSj52hdtMhas4SWzghxu09HcwkucWTiBxORfMCyTdwQkpqcBObOgLE8o44nOAhmvLgAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAA0ElEQVRIS8WQCw6DMAxD2f3POGk36eqqiUxw+kFMo3qIusEPcZRSlqkXbvVRnytkqEDx510aOxIZMigzWGDE+YgMgZfQcgGviUiHodiWFNhKJOcNihERr3oEssWz/n7deac/9KERJlNnDEvaLQrsV9h+l8cE2dxUsMrPBRm3BNnXKv4jaBsampEJubyf5oLRV98StICGRwJFLO9vnoMW0kurqHJwCQwlWf0tjAyNKFGCUTmQIRMlzKwcyDCCIhb5nmYyZJixU2zI8Elk+Bzl+AIQ0o6UG0vCNAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAxElEQVRIS+2Q0Q0DIQxDGY0Vbrp2lHaZdpT0jC7IhEBRy/F1Qu8jxrEFQUROxRVHiDGKYu8YV2zBoYEO63anGHpg+XXb9qF/bEkR0uOUApiZVLCvJMxRj80oBiWbH5vIc5P3vQY6M1yQTFhC+FEAeuGMLfHDG3wLV7hkXUES6Uv+RUvqgkklV0GbY399QS4h069oOFhbANKlftVoEfk5HBThSn6JE1BBPhsOioGBuXpNg+x1cirBoss97A7jijNxxXlI+AAntFjfuPQ7WAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAArElEQVRIS+2Oyw3DMAxDM5pX6HSdrp9NVNAoA0WmajtN0UsOL7AYi8+LmU1RSjEQ8wwZZqD4fr1URiUy5CsJMxYruBtpgnoZsYMlXqDuxC6wGdSiBwKVEyVZD71y8OgIQJSshxHBKF5SP6cgcgoanjercP6PAMxKYjH5qcCXv//sFyg+CsC3kq4A7JXEcrAZPLMSVQ6awBMlmTQrBzL0YJnE2ecZMjwSGR6HLS+gyGG7OJRBYwAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAA9ElEQVRIS8WUSw6DMBBD6c3YcVu6LYep1JukcoIVZzLDp0JF1lvUJX5ApQ4pJZdxHBOw/VncEsPTa85QFGHPWtwScICizPIsSLcncUuFIpVpZ6+3uKWiY5cKODBIPu+U0W5P5JZ2mJkW/A6zNDWRpCuicWRLgHiS5gOggGN8LdGwSncFeve/CBArCQWMHUAoLP1jpSQU6Hg70Ef7VlSiknsE9UA91L+W2vM7diefoBUhUc/cIwAqYShS6dYN6Dj4rwB4EqSM9amifhw0H4AV8C9aO8TrDwmASo4KvHHQFQQH7NMwdjgaB26pcCDCXm9xy+tIwxcdHKxieWdabwAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAA1UlEQVRIS7WO0RXDIAwD01GyCfsv5SLznBpHJtBHPi4FYZ96iMir0HAnNMwopQiI+QgaMlSM8cpKSXfJ/qGXj0rYfvd4nqL4IT0HuRHn2L5+sgH9DdKIn10q0KEgy7D56QKNPm35Apk/k/f1Ai9B5s/kfa2AYVL2VpkuGJYk+F1aAP4t8TteDvrJSlbSFu9nPxvloLsYseS33Eby994DboERJaOCTA5oaHhRVjCSAxp6TMYKnuSAhhGIYsGMHNCQEQuuywM0ZLxeACBekQMa7oSG+5DjC4x+A5kXvEc+AAAAAElFTkSuQmCC")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAlElEQVRIS+WNUQqAIBAFvYqnsSPXYYJusvkgS7enRRZGBdOHb5kxIvIY1oqhA8N/+K3onXEYSIUp6abGhWJAS2Mh25KHhWyAC8qwCA0w2ZkA0JF3BM7KwQ8CNfJAHPl44IocZANaeDUAQqRdoEYOPh7oBhFXYBo3cKvv2wUABtf7wwJxgO1BDnYBgIMaYhcN3Im1YmYMVfFg4XhmxgAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAxklEQVRIS+WQ0Q3CMAxEsx2MDMMgsUnQq+v24sYUoTZC4uPJztm+k1JqrSdQFkR8D6uRuLPC0BBxi5pdbnWDzttbBEPEFkaT0d1wIyXO13sexixs6RlEDg3Y458DZq4YSa9v+L0AYOw8H5Ow9PqG9hbBEDGHtV6Aa3Ef1RExx02p3g8JsPPeDQNDxBw3pUbirsHAEDGHtaEBp3/RsIA8BNEQMcdNqd7n5sDAEDHHTaneHxoA0Tg3BzMHEffZN3a+DPgcDyjlBVzR0/orXteoAAAAAElFTkSuQmCC")),
]
pac_sprite = [
	#move/eat frames
	pygame.image.load(b64ToFile(HEADER1+"BHNCSVQICAgIfAhkiAAAAG9JREFUSIljZCAA/r9j+I9PnlGIgRGvPLkGE2sRhiCpBhOyCIVDqeHYLIEzqGU4uiVM1DQUq0UMDNR3PdxwIQZG2vuAVq6HAZr7YNSCUQsoB8MgJ8MYQ7s0hQGaVjjUsgRvlUmJRURX+qRaRKjZAgBftScQFEHPpAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"BHNCSVQICAgIfAhkiAAAAItJREFUSIndlUsOgCAMBV+NJ+D+Z/QKsJKINv3RbuxKIJmB2A9BiX6hS+fUQOJ5FGwVfTa9YE20LHbhnGR+ZMHfkiMTyoqA/NtPeAOdFdBlnXF7qRbCL9AKLCSwQl2CCPQZ9Wnq+cmR14SzyCorT9P0Sma7aWWr+Ek3vaN04GRJxJG5IzIPfa9IK7gBdpkzeGqmn6oAAAAASUVORK5CYII=")),
	pygame.image.load(b64ToFile(HEADER1+"BHNCSVQICAgIfAhkiAAAAIlJREFUSIm9lbkRwCAMBFcuwf3X6BZwQuLBA7rjUQjDLpJ4gkGUh9Kbj5vozrvgrKgZVME9eCNYDf8IdsABLhWqwKFmsKqhfyFnoMABQtm9CgchAweeFrjwlGAGnhLMxlDgXEBJMCtJl8iVyDdZbbrcZPlZsRcmM7GPaXZD5z6cXZLzn74qGpXoBRgtNiS9lK5aAAAAAElFTkSuQmCC")),
	#death sequence frames
	pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACPSURBVEhLvY8BCoQwEMT6/8f6hd6NtLCMAXWXdSBKQZI67jaPMS/MqcfJnp9vh+JNCEQeDYVORqyhzGmVi9ZAq1xk5BrKnIxYQxnRGljy9kBqKIxUbq+hNFKRayh1vgikIygkvvqLVAiFRHskBF5HUEhYRDweCp1KQEOpU41oKF6sT/6HQmCPAlvo7+vG+AFEC0wBajXP1QAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAgklEQVRIS92OQQqAMAwE+//H+oVIhJSg27obtQcHhlIos20jzKyfM4Pz/ZYcYaWwzd/iwEiaIy4O0PT4kgFyhOYSJwYklAEZGA9/N1AChrOrBsrAaPj09w4Mh2mgPALD4RsDDhPPyqgDrow64Eqo8SzN5wNOZcCVQZGZZVAsG28wre3ZPV9DAibonAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAi0lEQVRIS72OUQqAMAzFdv/DeoVpPypVon1vgoEwBmu68cSc8zzfTO73lhpRlaDBThka7pShYUUZGu6UmdvxPoTIkxbnAmGJzSUuLLHBBSHEQxuMp1/jAYarfy1YBqPp198HGA5LPF1CjYfLKPGqjRNPbSjSaUEBVRkaVrSggKINRd5chmLVfMOMsQMlZ2GnvNNVcwAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAfElEQVRIS72NwQnAMAzEsv+wXcHtJyUU2b7zowIRAjllZUTEe1ZuvveWM6IqQcNOGRp3ytBYUYbGnRI0VLSgQKYNRSptKFJpQ5HMEXE928q/PhizA51jKJY5gkKZYyhWaUORThuKdFpQQFWGxooWFFC0oUjlGIqd7jfMWjcFUWeyLYZAwQAAAAABJRU5ErkJggg==")),
	pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAA8klEQVRIS72Qaw7DMAiDe//D9goZKXFweLSr1u7HpxiDQcrWWnsVFft4ga/ZP+sldTDKGl7le2+wGjz4yoFOdmTvz6gzj1+HiqJ5oEtFTg2/kdY3wQoOay3P9Flbn3V/Ac2ZyU3T8gwPC1nzjGVMC0sxwSLVWBwPYLn5miFU8ICGge9V5Jl5oOL6kPaz7EBFHv6d/x2oeOSLqtD5Yo9lwgFnHCCoGof4oHk8D2jXUhzwwLogHuAZy5gW1gY3/XI/c3Vk9MzgAUaHRU4N3w6cEE0funPA18JqXAV6/c0M1WUj1PAqv6iDMam8O7PyxsajtO0DGU/sOEzUl5kAAAAASUVORK5CYII=")),
	pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAABhSURBVEhL1c0xCsAADMPA/P/TKR2LNUVeKrglGDK7WxXRyIhoZEQ0MiIaGRGNjIhGVxgNrzAaXmE0NCIaGRGNjIhGRkQjI6KREdHI+kSDlv8/eOGxCY9NeGzCYxMeW2ZmHq0A61sEHelqAAAAAElFTkSuQmCC"))
]
ghost_sprite=[ #call with ghost_sprite[id][dir][frame], or ghost_sprite[5][blink][frame]
	[#red
		[#right
			pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAvElEQVRIS7XNUQ6EIAwEUK/i/c+0iTdhK51KGYqLpvvxJjAtupVS/iosB+fajOSdsLzwx+5IRsKy4g+skGRDUfHDJyS97lLxgzckzXWoaPH4lA7Pb3ckcYt/wA/N8o6knZrJ431vlnck7dSsPl7dQSor4efjlR2kstLxHzg93kEqP8iCVDzMgFQ8zIBUPMyAVDzMgFQ8zIBUNOjuvjezOd3PVK4curczZCvt7Nkyz2e9QT8OkoVlprDMU7YvX923frjYo5gAAAAASUVORK5CYII=")),
			pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAyElEQVRIS8XNURKDIAwEUK/i/c/Umd6EBnYjuAbEDp1+vBWzQbeU0k+Fw4u81mM5Eg4P+rERy0g4LPQDMyzVZVDoxScsW6eXQi98w9Idh0IW3690ov1wx5Jv8Q/0opvesfRT1bm879X0jqWfqtnLsztM8CHdXp7ZYYIPG+0Hssc7TGiLVZig5QpM0HIFJmi5AhO0XIEJWq7ABC2dZTh3luE8Y4KWpSrzfOj3rtPnrKTkDE+c0bV9K+hRjLQ/UKOOwuHJX39wK20f9Nqik4dXT5kAAAAASUVORK5CYII="))
		],
		[#up
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACwSURBVEhL7Y1BEsUgCEN7ld7/TH+mN+HHFlQQrHbsrouXwZDIRkSv4pqKFImA3uGaJ/azHtAI12w+GAHq0Zq2OAPUog0O7jtljh/HDGEGWlMeHEhhW7ZHbjNQIQ/D5ZEMVMhDXfbI5ZEMVLgGWQCvmJjKQIVrkAUTFmcyUHbbA0uAfgf6QL8DfaD+AfuufSHa2zdPZcGm8p7u+F1MNhQStvvIFypfL17ANVfimuug7Q9iM7d+BW31hgAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC8SURBVEhL7Y3LDQQhDENpZfqvaaXphDX5sBBCAGnnNodnBccmKef8KK7ZUSIzoCtck7CfRUBnuObwwQ5Qj9G0xROglt6Q4HXlyv2RmGGagbb8HhIoYVu2R5YZqFKH7fJOBqrUoS171PJOBqrwoAvgFQtHGajCgy6EafEkAxV3PPAXoO+BGOh7IAa6PgB1fQXq+gVogWRYks2BcJ9oCPskQ0i9Fm+vB3jmXbuXV0z7iSXaCa7Z8fiBiOWBnL6Cs6KTUGVvNwAAAABJRU5ErkJggg=="))
		],
		[#left
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC8SURBVEhL7ZBRDoQwCES9ivc/k8nehKV1SgGpsqb+bPx4ExgYmnQhokcJTUNZGcF6RWhW/LEzWEeE5uFABtaIo+mDv8DqsYYP3IFV0xssfDYySFBxucPakKKUPtjQ4Whe0DtyE90Ol+tKwiic2ZGb6OR7MuHMTr0J9gKDTDizU2GF2x8o6FAYTO7Uu6jMA9NgfR84h/VfH/C99hujue9R9QFM492doe8mDENb9vOR31C+HTxAaM4kNOdByxds0Ld+nk5YtgAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAyElEQVRIS+2QUQ4DIQhE9yp7/zM16U3oiMiiItKm+9V+vAkODCQeRHQrrtlRRlZAd7gmMy6LgK5wzWlBBqjHbI7Bd4CO9MYY+ASo5XrIwPNBHRo0bGegDS1KOQYbNuz1C3ZGd8qrgvI8SVmFMzO6U176PZlwZoZ3CrWQRiacmWGg4l4HCjbkBpMzvFeq7sDXgP4PxEB/4QDU9RtQ1y9ACyxTk+06EPYPLsI8yzTUPIvXbwdqXXu2L68Yu2Qk6gmu2XH7gYjtATpejVCik/LAlwQAAAAASUVORK5CYII="))
		],
		[#down
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC7SURBVEhLxc3RDcMgDATQrJL9Z6rUTajBZ2IOJ6Kpo368UzibsJVSHhWWk7p2RvJKWHb8syuSkbBs+AcrJNlUNHzxG5LecGj4wh2Spn80vPgLyapF5xberzLws6UdSTTzA3zR9MsrO5I4PfRAhVRuYMv7fuDLKzs4/eGBii/zfGkHqXiYAal4mAGpeJgBqXiYAal4mAGpaDCcfW/O5nSuqVw5dXdnyKO0b8+WeX7WG/TzIFlYZgrLPGX7AFD+t34uLwUhAAAAAElFTkSuQmCC")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAADGSURBVEhLxc3rEYMwDANgVmH/mXrHJqkfSjDCpGkbjh+fAMshSynlVunwRNeuSPakw4Z/1iOZSYeGfzBCkp0Ghg9+QzI6fBg+8AvJqr0YXvyHpLJowsL2KgexG9qRxOR8AR+s2uGRHUl83XSBQrpQ1OV13fHhkR18PXCB4sPcD+0gHZczIB2XMyAdlzMgHZczIB2XMyAdl5VkOq8k07lCOi6tsrm+XPfVRa+5oxIzf/q7d7GPkt6LnngB63WQDg8eveCjsrwB5fuik4/YpGUAAAAASUVORK5CYII="))
		]
	],
	[#blue
		[#right
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC2SURBVEhLtY3rDcIwDIS7SvefCYlNAlfZxyW1qUHuj0/3cpttjHErYbkSlobYkLB0wjJB7ERYgrC8QCw5FWlZROzBFMLiD8TO/5vCm+djZt2/3ZjkD6wfOtUbO6k9sO8fqjd2ct8DAMJ7GuPq48oNhPc0gv4A/HoDYdahCwizDl1AmHXoAsKsQxcQZh26gDDr0AWEOR0EsemeZi0dGkNsaVN/GPeKBrFp73h/GroJy07Cso+xvQBp4c51TChcVgAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAADFSURBVEhLxY3rDYMwDISzCvvPVKmbpBx1rufgkLQy6o9P9zKk1FpvJSx7wtIQGxKWjbAcINYRliAsJ4glp2JYLiL2wIWw+AGx/n8u7Dwfnn6/ujEZP9B/2Fi9sZO1B7btw+qNndz3AIDwnsaYfbxyA+E9jaA/AN/eQJh1yALCrEMWEGYdsoAw65AFhFmHLCDMOmQBYdZBgUR9AxL1AMKsQ+OQ8p76DYgd7q7TQGsPAJodsURDs9rFyAMnrjYjLB1/fWBKLS+MCMCDFp7DHwAAAABJRU5ErkJggg=="))
		],
		[#up
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACzSURBVEhLtY3RDcQgDEO7Svef6aRuwikoxi4EAVL68WxjjLhKKZ8SlkpYOhKnhKURlhMkDuyXCyS+WBcHSGyEh/smz08Gwmzj1hiCjfvH/SerjVtlCKvHOxu3yhAw7mnDjY1bheJED42TjVuFIswenmwQKckgUpJBpCSDSEkGkZIMIiUZREoyiBTHTM/aA+2BWX82KFZ5abTgSNy6c+MH5j16kDjtgfaviy8Iy0zCMo9y/QHvjM51V1WTzwAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC7SURBVEhLtY3bDcQgDARpJf3XdFI64WLkxwImBsn5mPWwMaHUWj/FLRG3ZECXuCXhlgtAJ/bLANCOuDgAVHEP12XcP1gAVjs8lEloebw8PhLt8GhMEl3e2eHRmESWR3RxY4dHw4LxLhInOzwaFsDq4smOqEUyohbJiFokI2qRjKhFMqIWyYhaJCNq4UDD6wUaXk+IWgyArr+X+L52Kg+gCh5U+QFC5QG0633gJxNv3xi37Pj8gTfCB2r5A7kawINAvleDAAAAAElFTkSuQmCC"))
		],
		[#left
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACwSURBVEhLtY3RDcMwCESzSvafqVI3cUXK+c4OlmlFPh5+nEEcrbVHCUMlDB3RJWFohOEC0Rv5cIPowD74AdHOuvkT0YubvF8jfUDYzYiOB+ZF0IeSM6LjgfMkq+XMjOj3ALrMcmZG9JkDBpTF0aVoMTsDZSkGylIMlKUYKEsxUJZioCzFQFkce7TXHGgO7Jl7g8UiD40ujmjqzx8esHdGG9FlDjQfPp4gDCsJwzra8QEkUc51TsfCzwAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC3SURBVEhLtY1REoMwCERzFe9/ps70JqnYLCyGGNpJPt76XEFKrXUrYcmEZYN0SFgKYTmAtCNfTiB1zIsfIFXGL39CetHJ++XRAWI2Q+oP3BeBDiVnSP2B4zBGy5kZ0u8BvGWWMzOkew4IUIsGL0WL2RmoxWKgFouBWiwGarEYqMVioBaLgVoEyCPqgTyiXoBa3CAdfy/zfe1UTkgVflFtBwSVE1LXx9BPOp6+NcLSsf3AE9MDtXwA7dDAg3MIbPoAAAAASUVORK5CYII="))
		],
		[#down
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAC5SURBVEhLtY3bDYNADARphf5ripROLlqEnbnDFlZiPkb78sE2xniUsFwJyxPYkLA0wjIBdiIsRVjeAOtcirQsAnswhbD4Adj5e1P4E7NTz/B+zXCr3Jhl52F9aPA42oXtpzz3AyHxzMGO9/3L+rhyI/HMofK4ciPxzEGsj9e9ciPxzKELiWcOXUg8c+hC4plDFxLPHLqQeE4HAJvuaWZpuDmBLW30hzFPGGDT3rD+MnQTlp2EZR9j+wCFG851rTPyBwAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAADJSURBVEhLxY3rDcIwEIOzSvefCYlNAi4540sdGkEqfnzy69KWWuul2LLHlg2xFlsGthwgNmFLYMsTxJJDMSwnEbuTgi2+QGz+Xgo/Ejb1Gu63jG4zN2G1Y+gfBnrsdhB7k+t+ACDMOsTxtr3pH8/cQJh1mHk8cwNh1gH0j/t95gbCrMMqIMw6rALCrMMqIMw6rALCrMMqIMw6KBDXBxDXAwizDsEu5TX1GxA73FOngbb9ANA8EUs0hNXOIz848Glr2DLx1x+cUssDp0LAg8nlopsAAAAASUVORK5CYII="))
		]
	],
	[#pink
		[#right
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACjSURBVEhL7Y07DsMwDENzldx/7nEK9CAFVHAgKsuUrSTOUnR4gE3xs5nZrUgx8n6YZXifQopEFWb4nEeKQJXM8HnSCUCFq/ge0HyACh3F9w3LX8+WeB952JkOxCCpethZGtj3L1UPO28bAOiU5WAWrniGA8AXgKOe6cBV/gNTfngg/r1Osnv8dwH+vXb2hncj8u2hOd4znVDvDquR4kqkuA7bPry0kTRj3c6EAAAAAElFTkSuQmCC")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACqSURBVEhL7c1BDoMwDATAfIX/n/scJB6CZLSAWyfZ2EYI9dAe5pDY3i0i8ij62VpfIiN2j6GfigWO2DuLfgILidh71X0AO86yOVA9gB1dZfPc8GWutXNvRzOHBe2hyu5oZqpgmj6yO5r5WAEgk4ZDdJzZcQvABsDVnbDgrn9B6EcKvBl4c8zcgn1Wjp3hPLh/L0A73J0FQOcGm3dLHVPQ8WYn+ln5akFIygayZIggQmbASAAAAABJRU5ErkJggg=="))
		],
		[#up
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAChSURBVEhL7Y07DsMwDENzldx/7nEC9CAFFGhgQ0tU7BQusmR4gyh+FjP7K1JkPi+zCvZVSNFRhRWci0hRlfTgPJMEFR6Fe0BzwLiuB+8tF515uM9J5W6O4TjS86DTuWdAgf+IB51OUz4SHvGg3EkDThW84jkdmMEz0OUZ6FIOxJt1UP3j7TQBiKz9+sP9FSEwMMd/pQPW03M2UpyJFOdhyw71bZE0lxTSGwAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACmSURBVEhL7Y1LCsMwDER9ldx/3eMUepCC0oGola3Rp9DQTRYPbM1viMip0KPleROJsL4IegSsMMLmVuiRlVTYvMUdWLiL7VGmjxq37cPj7osyj+0DrhzmNbyOVB7tBP8ZYKje8WgnmMo74Y5Hy4EbAFHwG0868AuugZJroKQ1kGkg06GBcEANqT7qPC3Rm4XqxwCg+ov3I8SUODLtgB4nTh/IKAdk7KX8iCAAuygwAAAAAElFTkSuQmCC"))
		],
		[#left
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACoSURBVEhL7Y07DgJBDEP3Knv/muMgcRCkIBdenBlHG9BsgyheEcefLSIuxYrK8xZRob4KKwJXWKG5ESu6kjM0r0yCC3fRHpIOF/oU7QNT+eOe0XDXw06QBsYg0bD7A/WwE6SBfX9ThTsedoKjvBvueFgOLhkAdgBoyAW7nnJgFf+BU354YLxVJ9V/vEEKUFTt2x/vQ6Sg0Dz+K52oPj1XY8WVWHEdsb0AVaKRNDIhsF4AAAAASUVORK5CYII=")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACvSURBVEhL7c1RDsIwDAPQXmX3/+Y4SBwEKcPSMpzVaYNEv+DjSVsTO83MlpKP7Hkzy/BeRj6CKsxw7ko+qpIZzrPuQYWruMeFHxX6FPdBV/64Rxyu7ngnhAPXoOOwmgPveCeEA9v2loUrO94JZ3k1XNnxclhyAOQB4JAKVnfSA9/yPzD1IwdGMxjNMYP0gC8M522elyX+xuT8OABy/nJ+pKikM5od5GOw/MDI9IC1HQYxiCDufrVdAAAAAElFTkSuQmCC"))
		],
		[#down
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACmSURBVEhL7Y1BDgIxDAP3K/v/M89B4iFIQT5YuKnDFpTVXjiM1NqxvUXEqVgx87xFVOidw4rEFVZoTrEicCVHaJ5MAnDhVbQHDB/gQt+ife3lhJ3lwOM+ot7KDTvtQA4SLXA+oM/O0wYAOqdywON9f5PDKzfXDYAczv7KzceBDv4Dh1w3kP+qk8rP/ynAv2q/engPIt8Kj7Nf6YT6ZHRjxU6s2EdsLwNtkTRIAh41AAAAAElFTkSuQmCC")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACvSURBVEhL7c1LDsIwDATQXKX3X3McJA6C5GpKDRN78kFqVRYs3iIZ21PM7FTyM3rezFp4TpGfTh1s4T0mP0EdGeF9lz5ALc/iO1A9QC19i+8dftz5zWbB417jbGbGb8qCuOj4gMrBc795WgHgZjoOPrwsH3F5Zua6AojLMZ+Z6RYc4V8w9BsFvQx6ObJuwZaV10wzH+y/ByCGm70AZE5UnoYSKkh62U5+Vi4tGLKyAvkOiCCQ8kT0AAAAAElFTkSuQmCC"))
		]
	],
	[#orange
		[#right
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAClSURBVEhL7Y3LDcMwDEOzSobqtJ2lQMfoTQEPRGVaspXWuRQ9PMCm+NnM7FJCUXndb5ahXiUUSVSYoVkSiiAqmaEdoBNAFK6iXc0HRKGz+L5h+fNhDXofediZDmiQVD3sLA3s+5uqh52XDYBmwAfBLFzxDAeALwBnPdOBb/kPTPnhAf17nWR3/XcB/r326Q3vRuTbQ7PeM51Q7w6rCcWVhOI6bDsAU33ZZdBtBe4AAAAASUVORK5CYII=")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACpSURBVEhL7Y3JDYNADEWnFYqiWmqJlDK4GTnB4PF8LyhCOSSHd7D/1ojoVuDTsi4zeVivBT4FVOhhswJ8Mqgkw3Yww4NB4Sq2qzsYFLqK7gvLnw/qsHrkkU53wAaFqkc6SwPTdFL1SOdtA0w3oINMFq54wgFGFzBXPenAp/wHUn5kINKYLBsOvLT29rh6kj8M1nT89wFXVyB9MA2ogYFI24HPjq8OpFDbAP+Yy7k7ja3DAAAAAElFTkSuQmCC"))
		],
		[#up
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvgAADr4B6kKxwAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAAChSURBVEhL7Y27DcQwDEOzSobKtDdLgBsjnQ4qGMg0ZTuBg2tSvEIUP4uZPYoUI8dnswz2KqToqMIMzkakqEp6cAeoBBUehbuc4oBxXe3ku1tV1PLEPqcqdzOHeaTnQafznwEF/iMedDpF+Uh4xNMccLLgFU9zYAbvQJd3oEs6wHfUQfbn2ykCEKN294f7FCFEYOZ/poOoV8/ZSHEmUpyHLT8LiNllRcy4JgAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACmSURBVEhL7Y3LDQIxDETTyhZFtdSCRBncDCOtV44z/iCx4rKHJyXj+QwRORUqWl73m0R4L4OKgBVG+KyFiqykwncoi8DCXXwXmD5q3DY5eD5kKco8tg8s5TD7sB+pPNoJ/jPA0HvHo51gKu+EO550AETBbzzpwC+4BkqugZLWQHYDVRaEA2pI76PO0xLVLPS+D4T3D8cjxJQsZLcdKk6cPpBRDsh4A2Aiy7maZ/oOAAAAAElFTkSuQmCC"))
		],
		[#left
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACoSURBVEhL7Y27DcNADEO9iofKtJklQMZIp0AFD5SOgmXj3AQpXiGKn83MbkWKzOf5sIrsVUjRUYUVOctIUZUckTvAJKhwl9zlhEOFzsJ9zlT+flmAw10POp0wkIOAw+rvsAedThjYdxtU4Y4Hnc4o74Y7ntsHHDngcEgFu55yYBX/gUN+eCDfrIPqn28nBCCydvWHe4gQGJjzv9IB69NzNVJciRTXYdsXKM3ZZenJw2sAAAAASUVORK5CYII=")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACuSURBVEhL7c3RDcIwDATQrNKhmJZZkBiDP5eT6sh2zomRyBd8PKl1fOcmIlvRofW63yQTdxk6BFaYiVmLDlnJSuxQw4CFq2IXuB8W+pTtg6H8+RDHhqs72gnuQAwqG2bvYHe0E9yB45AuC1d2tBN6eTVc2dl+AOgBsCEWrO6kB77lf2DpRw7M3mCVhfSALkzf2zpPS3Rm0ffrQPr+1j9SpmQwe7vQobP9wMzygLQTfWfLuXeH5hIAAAAASUVORK5CYII="))
		],
		[#down
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvgAADr4B6kKxwAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACmSURBVEhL7Y3BDYRADANphaKuWmpBujLuF5SHRdbrwIKC+NxjpF07ticzexQpMr/lYxl8y0gRqMIMzgIpOqrkDO5wOsFR4VG4q/k4KnSV2FdeDtCZDnxXa4jeyA065QAHQSxQvgMfnY8NOM1ANHA8zzscHrl5b8DhMPsjN4cDFfwHTnlvgP9RB5nP/y6Af9Tuev5uRLwjOGY/0wH0zqhGipVIsQ6bNldG2WUd7IfSAAAAAElFTkSuQmCC")),
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACtSURBVEhL7Y3LDYNADES3FYpKtaklEmXk5sgJJt7Z8XqRQHDg8A72/IqIHAp9Iu/nQyLQi9CnwQojMGvQp8JKMrBDaR4KC4+CXdWhsNBWfN/u5YZ1hgPzSyq8NuKxTjqAQcMXMF0x3ToPG1CqAS+YeZr+YHjEc96AgmHURzzdgT24B1KuMdDTlCzbHfhq5ecJ9SS/GtC0/peBUHcwvTE1uIGGnrZAnxWnDqRI+QADcMu5cKrRqQAAAABJRU5ErkJggg=="))
		]
	],
	[#dead
		[#right
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACfSURBVEhL7Y3RDcNACEOzSvafqVI3oQIdqiEO9JrLT9UnWcnZgDcRuVXUzKpg8yhqumZg+ypqqr6B3qHmBQ63DsYCwr3wSDwfIqhhB85m2oK86BqxwXKVZlMF+/7WiI1q5vYCJRRkumWlmykLFDygGnagmmkLrvIvaPnhgrNCn61yxN55wd/oObOZ/aPp/yjkEx9z++Zgtai5UtRcJ9leBvCJkAr8Wh0AAAAASUVORK5CYII="))
		],
		[#up
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACfSURBVEhL7Y1RCoAwDEO9yu5/JsGbVFraEWe2OZ3444PAlrTNIiKvipqoFmy+FDVVI7D9EDdvwO6ozsYDylt27/BxUhIJbSsEQG0G79nN/HB0uFwuS3oz3xcweWywXOXxuQBhiyqPDZarPG4XKLVFpDfTLJjBX9DlL+hSLagVxkIrR/IsBmGiF4xm+R9mGCjkio95fmPwhqg5U9ScJ1l2Ao2JkNggVVsAAAAASUVORK5CYII="))
		],
		[#left
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwAAADsABataJCQAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACiSURBVEhL7Y3RCcQwDEO7Svef6aCb+HCIgprKrdsmP8c9ECSSbS1mNlXSZJ2h5ntJ03UHtQ9p8wHqjutovKC/Ve7tPgPge+Vme1S2jxmr2juuZsKCfhEqYUXlrhoXwoJ1NYOi5czMoQBkljMz0wscWeDwklp0MjNhwSj+BZf8cEFUiIWznGmzHMBkD9zN2h8mDBaT8Tlvbw5mSJojJc1xsuULuOmJkLXTY7kAAAAASUVORK5CYII="))
		],
		[#down
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOvwAADr8BOAVTJAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACcSURBVEhL7Y3bDYUwDENZhf1nuhKb5CpVI5xgUh5B/HAkq62d1JOIPCpqRmWweRQ1TWdg+ypqqq5A/6HmDTZ/bYwC3H/uUciwYPmJoLrtyGbSgrho6nGD5aoeP1+guALEhud5VVw+MvNegRKXu+0YzaQFFXwFQ94r2Cu02SxH2jsu2Bs942zW7mjaHYUc8TFvZwyqRc1KUbNOMv0Bo9CJkPSboKQAAAAASUVORK5CYII="))
		]
	],
	[#scared
		[#blue
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACfSURBVEhL3ZA7DoNADES5CofinmmjXCxKY+RiosEeA5vdNFs8af38GcRiZn9Fysi6mlXwnEJKoA5W8B4jpaOOXMH7IAlHLd+F7ziHwlFLrfC94ccBbl4GfJ6PL3c8wM2JAtRQLxMHVP+31acAHuzlNABfEENbvL9TwGgmDog1e1D1Y50WULP7tefvg8SbwXDsVx7Ap8ZopGTer62DbdkBhX3c8HScdxUAAAAASUVORK5CYII=")),
			pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAnklEQVRIS+WQUQ6AIAxDuQqH8p7+Gi9m/JlpdGRCmRL0Rz9eAu3WEoKIvAoVc2IUqWHnGFRUWGANu2ehImAhV9h9pRAAW76LzQGnC2BLrdi8x8MVzbwsWKcxcUdXNPNDBWyolw8X1P63VS8K7GAvboG+IC9t0XEuCp7mJwWeBzwfnlugnuuHPaPmpwCQmznUPwoA85P5FlS0LPPQwRA2zwnTyWVXbtcAAAAASUVORK5CYII="))
		],
		[#white
			pygame.image.load(b64ToFile(HEADER1+"BGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xMzQDW3oAAACkSURBVEhL3ZFLDoMwDES5JKftWZB6jO7cJmTK4Iz5NOkmiyfFz59BYjKzvyKl57mYRfCcQkqgDkbwHiNlQh05g/dBJRJq+Sp8J7ErEmrpLnyv+3GAm6cBeaRwxX/7n06ZGiVADbUycEDWhSa/2i2AB1s5DMAX+NA7Pr/XasSf3IswwNfsQdT3dbWAmt2vvfTeSbwZDPt+5AF81eiNlMzrMTcwT28f8VcqUt4CYQAAAABJRU5ErkJggg==")),
			pygame.image.load(b64ToFile(HEADER1+"AXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAAAoklEQVRIS92RUQ6AIAxDuSSn9SwmHsO/6YDhxDIw6A8fL4F2a0lwRPQrUCzZVqIaeg4BRQEF1tB7GigyKKSF3hceAoOWe9E5zO3CoKW36LzPwwXJbBaEkUSPnv3TSVOzFKChUSYuCHJiSI/qVaAHRzEL5AVl6Rs9nONtxk/+iq4Cy2Msnz2zQDzTdzGj5ucApjRLoJ8KGORn8y+gqNkXP4B3Bz2XWGBgsBU6AAAAAElFTkSuQmCC"))
		]
	]
]
#Snake functions
def snake_collision(trail, obj): #loop through snake coors and check if match with input coor
	ret=0
	for i in trail:
		if i==obj: ret=1
	return ret
def snake_out_of_bounds(trail): #check if snake "head" is outside the screen
	return trail[0][0]<0 or trail[0][0]>24 or trail[0][1]<0 or trail[0][1]>24
def snake_eat(trail, foodpos): #check if snake is eating food pellet
	trail_cor = []
	trail_cor.extend(trail) #pure functions
	if trail_cor[0]==foodpos: #if food being eaten
		trail_cor.insert(-1, trail_cor[-1]) #duplicate the last coord
		return trail_cor                    #increases snake length by making snake_move leave the last value in the list
	else: return None
def snake_move(trail, direction): #update snake tail positions
	trail_cor = []
	trail_cor.extend(trail) #setup new list (pure functions)
	trail_cor.insert(0, (trail[0][0]+direction[0], trail[0][1]+direction[1])) #insert new snake position
	trail_cor.pop() #delete ending snake position, advances entire snake forward by 1.
	return trail_cor
def snake_draw(game_window, trail, foodpos): #draw snake game
	game_window.fill((0,0,0)) #blank screen
	pygame.draw.circle(game_window, (255,255,255), (foodpos[0]*24+12, foodpos[1]*24+12), 12, 0) #draw food pellet
	for i in trail: #loop through all coords and draw box at position
		pygame.draw.rect(game_window, (255,255,255), (i[0]*24,i[1]*24,24,24))
	pygame.display.update() #update display
#Pong Functions
def pong_draw(game_window, paddle1y, paddle2y, ballpos, scorep1, scorep2): #function to draw pong layout
	global font
	game_window.fill((0,0,0)) #blank the screen
	score_font = pygame.font.Font(b64ToFile(font),36) #create font for score text
	text_font = pygame.font.Font(b64ToFile(font),18)
	pygame.draw.rect(game_window, (255,255,255), (600-48, paddle1y-48+150, 24, 96)) #draw paddles
	pygame.draw.rect(game_window, (255,255,255), (24, paddle2y-48+150, 24, 96))
	pygame.draw.rect(game_window, (255,255,255), (ballpos[0]-12,ballpos[1]+150-12, 24, 24)) #draw ball
	pygame.draw.rect(game_window, (255,255,255), (0, 150-6, 600, 6)) #upper seperator
	pygame.draw.rect(game_window, (255,255,255), (300-3, 0, 6, 150)) #upper divider
	for i in range(38): #dotted lower divider
		if i%2: pygame.draw.rect(game_window, (255,255,255), (300-3, 150+(i*12)-8,6,12))
	p1s_render = score_font.render(str(scorep1), 1, (255,255,255)) #make renders of scores
	p2s_render = score_font.render(str(scorep2), 1, (255,255,255))
	p1_render = text_font.render("Player 1", 1, (255,255,255)) #make header text renders
	p2_render = text_font.render("Player 2", 1, (255,255,255))
	game_window.blit(p1s_render,(450-(p1s_render.get_rect().width/2), 75)) # blit all renders to
	game_window.blit(p2s_render,(150-(p2s_render.get_rect().width/2), 75)) # centered positions
	game_window.blit(p1_render,(450-(p1_render.get_rect().width/2), 35))   # on screen
	game_window.blit(p2_render,(150-(p2_render.get_rect().width/2), 35))
	pygame.display.update()
def pong_move(keyup, keydown): #returns 1 for keydown, -1 for keyup
	pygame.event.get()
	keys = pygame.key.get_pressed()
	if keys[keyup]: return -1
	if keys[keydown]: return 1
	return 0
def pong_ai(p2_y, ball_y, ball_yspeed, difficulty): #just says whether the ball is above the paddle or below it and to move there
	if p2_y+difficulty<ball_y:
		if abs(ball_yspeed)<8: return sorted((0,abs(p2_y-ball_y)*0.2,8))[1]
		else: return 8
	if p2_y-difficulty>ball_y:
		if abs(ball_yspeed)<8: return -sorted((0,abs(p2_y-ball_y)*0.2,8))[1]
		else: return -8
	return 0
#Gender-Neutral Pac-Person Functions
#world record for most args in a function right here.
def gnpp_draw(window, level, pellets, pacpos, pacframe, pacdir, ghostpos, ghostframe, ghostdir, ghostdead, ghostscared, ghostflash, pacsprite, ghostsprite, paclives, pacscore, pacfruit, flash=0):
	global font #too lazy to add args for these, i already have 18 args anyway
	global fruit_sprite
	pacframe = int(pacframe)
	if flash: map_colour = (255,255,255)
	else: map_colour = (33,33,222)
	window.fill((0,0,0))
	map_surface = pygame.Surface((28*16,31*16))
	for y in range(len(level)): #loop through every character in level map
		for x in range(len(level[0])):
			current_symbol = level[y][x]
			if current_symbol=="[" or current_symbol=="]": #draw lines depending on characters
				pygame.draw.line(map_surface, map_colour, (x*16+8, y*16), (x*16+8, (y+1)*16),4)
			elif current_symbol=="=" or current_symbol=="_":
				pygame.draw.line(map_surface, map_colour, (x*16, y*16+8), (x*16+16, y*16+8),4)
			elif current_symbol==">" or current_symbol=="~":
				pygame.draw.line(map_surface, map_colour, (x*16, y*16+8), (x*16+8,y*16+8),4)
				pygame.draw.line(map_surface, map_colour, (x*16+8, y*16+8), (x*16+8,(y+1)*16),4)
			elif current_symbol=="<" or current_symbol==",":
				pygame.draw.line(map_surface, map_colour, (x*16+16, y*16+8), (x*16+8,y*16+8),4)
				pygame.draw.line(map_surface, map_colour, (x*16+8, y*16+8), (x*16+8,(y+1)*16),4)
			elif current_symbol=="\\" or current_symbol=="`":
				pygame.draw.line(map_surface, map_colour, (x*16+16, y*16+8), (x*16+8, y*16+8),4)
				pygame.draw.line(map_surface, map_colour, (x*16+8, y*16+8), (x*16+8, y*16),4)
			elif current_symbol=="/" or current_symbol=="'":
				pygame.draw.line(map_surface, map_colour, (x*16, y*16+8), (x*16+8, y*16+8),4)
				pygame.draw.line(map_surface, map_colour, (x*16+8, y*16+8), (x*16+8, y*16),4)
			elif current_symbol=="-":
				pygame.draw.line(map_surface, (255,184,222), (x*16, y*16+8), ((x+1)*16, y*16+8),2)
			current_symbol = pellets[y][x]
			if current_symbol: pygame.draw.circle(map_surface, (255,184,151), (x*16+8, y*16+8), 2*current_symbol) #draw pellets
	if pacfruit: #draw bonus fruit
		map_surface.blit(fruit_sprite[pacfruit-1],(213,269))
	for i in range(4): #draw ghosts
		try:
			if ghostscared[i]: map_surface.blit(ghost_sprite[5][ghostflash][ghostframe],ghostpos[i])
			if not ghostscared[i] and not ghostdead[i]: map_surface.blit(ghost_sprite[i][ghostdir[i]][ghostframe],ghostpos[i])
			if ghostdead[i]: map_surface.blit(ghost_sprite[4][ghostdir[i]][0],ghostpos[i])
		except: print("",end="")
	if pacframe<len(pacsprite):
		try:
			map_surface.blit(pygame.transform.rotate(pacsprite[pacframe],90*pacdir), pacpos) #draw pacman
		except: print("",end="")
	window.blit(map_surface, (300-map_surface.get_rect().width/2, 600-(31*16)-48))
	for i in range(paclives): #draw pacman lives
		window.blit(pygame.transform.rotate(pacsprite[1],180),(600-36-36*i,600-36))
	highscore_font = pygame.font.Font(b64ToFile(font),18) #create highscore font, draw score at top of screen
	window.blit(highscore_font.render("SCORE: "+str(pacscore),0,(255,255,255)),((300-(highscore_font.render("SCORE: "+str(pacscore),0,(255,255,255)).get_width()/2)),6))
	pygame.display.update()
def gnpp_get_ghost_mode(level, counter): #get whether the ghost is in chase or scatter mode, based on timing and level count
	if level<5: #timings mostly taken from "The Pacman Dossier - GamaSutra"
		if counter<7*60+1: return 0
		elif counter<(7+20)*60+1: return 1
		elif counter<(14+20)*60+1: return 0
		elif counter<(14+40)*60+1: return 1
		elif counter<(19+40)*60+1: return 0
		elif level==0:
			if counter>(19+40)*60 and counter<(19+60)*60+1: return 1
			elif counter<(19+45)*60+1: return 0
			else: return 1
		else: return 1
	else:
		if counter<5*60+1: return 0
		elif counter<(5+20)*60+1: return 1
		elif counter<(10+20)*60+1: return 0
		elif counter<(10+40)*60+1: return 1
		elif counter<(15+40)*60+1: return 0
		else: return 1
def gnpp_get_lvl_bool(level,ghost=1): #convert string level into boolean level
	level_grid = []
	for i in range(len(level)): #loop through and set value 1 for walls.
		if ghost: level_grid.append([int(level[i][x] not in ("-"," ","g")) for x in range(len(level[i]))])
		else: level_grid.append([int(level[i][x] not in (" ")) for x in range(len(level[i]))])
	return level_grid
def gnpp_get_lvl_graph(level_bool): #convert boolean level into a "graph" of connected nodes
	graph = {(y,x):[] for x in range(len(level_bool[0])) for y in range(len(level_bool)) if not level_bool[y][x]} #create object of open positions
	for y,x in graph.keys(): #loop through grid
		if y<len(level_bool)-1 and not level_bool[y+1][x]: #create list of available side connections per position
			graph[(y,x)].append(("d",(y+1,x)))
			graph[(y+1,x)].append(("u",(y,x)))
		if x<len(level_bool[0]) -1 and not level_bool[y][x+1]:
			graph[(y,x)].append(("r",(y,x+1)))
			graph[(y,x+1)].append(("l",(y,x)))
	return graph
def gnpp_closest_valid_coord(level_bool, point): #fixes every keyerror and out of range error
	pointlist = [(x,y) for y in range(len(level_bool)) for x in range(len(level_bool[y])) if not level_bool[y][x]]
	return min(pointlist, key=lambda c: (c[0]- point[0])**2 + (c[1]-point[1])**2) #lambda taken from http://tiny.cc/hm4eiy
def gnpp_pathfind_heuristic(pos,goal):
	return abs(pos[0]-goal[0])+abs(pos[1]-goal[1]) #get manhattan distance from goal
def gnpp_pathfind_astar(level,start,end,current_dir,ghost=1): #([12,15],10) special coords
	dirs = { #store directions library
		'u':1,
		'd':3,
		'r':0,
		'l':2,
		1:"u",
		3:"d",
		0:"r",
		2:"l"
	}
	rev_dirs = ((-1,0),(0,1),(1,0),(0,-1)) #reversed direcion list
	start = int(start[1]),int(start[0]) #convert input to directly useable form
	end = int(end[1]),int(end[0])
	if end in ((10,15),(10,12)): #fix errors with special movement channels
		if start[0]>10: end=(11,end[1])
		else: end = (8,end[1])
	if end in ((22,15),(22,12)):
		if start[0]>22: end=(23,end[1])
		else: end = (20,end[1])
	priority_queue = []
	heappush(priority_queue, (gnpp_pathfind_heuristic(start,end),0,"",start)) #push variables into stack
	checked = set() #create set of already checked paths
	level_bool = gnpp_get_lvl_bool(level,ghost) #get level as boolean
	graph = gnpp_get_lvl_graph(level_bool) #get level as graph
	for i in range(len(graph[start])): #prevent reversing direction
		if graph[start][i][0]==dirs[(current_dir-2)%4]:
			graph[start].pop(i)
			break
	if not (end[0]<16 and end[0]>12 and end[1]>11 and end[1]<17): #prevent re-entering the "ghost house" with normal pathfinding
		for i in range(len(graph[(11,14)])):
			if graph[(11,14)][i][0]=='d':
				graph[(11,14)].pop(i)
				break
		for i in range(len(graph[(11,13)])):
			if graph[(11,13)][i][0]=='d':
				graph[(11,13)].pop(i)
				break
	while priority_queue: #while paths available for checking
		_,movecost,path,current=heappop(priority_queue) #get value from stack
		if current==end: #if at the end return -1 or the path
			if path: return dirs[path[0]]
			else: return -1
		if current in checked: #skip over if already checked
			continue
		checked.add(current) #add to checked
		try: #add result to stack
			for dir, sides in graph[current]:
				heappush(priority_queue,(movecost+gnpp_pathfind_heuristic(sides,end),movecost+1,path+dir,sides))
		except: return -1 #error
	return -1 #if no path found
#FileIO functions
def scores_load(): #this function is held together with duct tape, glue, bits of string, and chewed bubblegum
	with open(__file__, 'r') as f: #open the script, load the top line
		data=f.readline()[2:]
	return eval(b64decode(data))
def scores_save(data): #write to the top line of the currently running script
	with open(__file__, 'r') as f: #basically this reads the whole file into a list, and modifies one line, then writes it back
		temp=f.readlines()         #it's slow and sucks but i only use it once so it's ok
	temp[0]="#"+str(b64encode(bytes(repr(data),"UTF-8")))+"\n"
	with open(__file__, 'w') as f:
		f.writelines(temp)
#Menu functions
def highscore_draw(selected, menu_list, title, game_window, score, scorelist): #this could probably be implemented in the menu_draw function but i'm lazy
	global font
	title_font = pygame.font.Font(b64ToFile(font),48) #setup fonts of different sizes
	menu_font = pygame.font.Font(b64ToFile(font),24)
	score_font = pygame.font.Font(b64ToFile(font),18)
	font_surfaces =[title_font.render(title, 0, (255,255,255))] #create list of font renders
	final_surface = pygame.Surface((600,600)) #create temporary surface to blit font renders onto
	for i in range(len(menu_list)): #render all menu items
		if not i==selected%len(menu_list):font_surfaces.append(menu_font.render(menu_list[i], 0, (255,255,255)))
		else: font_surfaces.append(menu_font.render(menu_list[i], 0, (0,0,0))) #draw black text if selected
	pygame.draw.rect(final_surface, (255,255,255), (50, int(400+(200/(len(font_surfaces[1:])+1)*(selected%len(menu_list))))-12, 600, 31)) #highlight currently selected
	for i in range(len(font_surfaces[1:])): #blit menu items onto temp surface
		final_surface.blit(font_surfaces[1:][i], (75,int(400-6+(200/(len(font_surfaces[1:])+1)*i))-5))
	scorelist = sorted(scorelist,reverse=1)[:5]
	try: score_index = scorelist.index(score) #see which highscore you scored
	except: score_index = -1 #dont display if you didnt get one
	score_surfaces = []
	for i in range(len(scorelist)): #draw high scores in a list
		if not i==score_index:score_surfaces.append(score_font.render(str(i+1)+". "+str(scorelist[i]), 0, (255,255,255)))
		else: score_surfaces.append(score_font.render(str(i+1)+". "+str(scorelist[i]),0,(0,0,0)))
	if score_index!=-1:pygame.draw.rect(final_surface, (255,255,255), (75, int(200+(200/(len(score_surfaces)+1)*(score_index)))-12, 600, 25)) #highlight your score
	for i in range(len(score_surfaces)): #blit menu items onto temp surface
		final_surface.blit(score_surfaces[i], (100,int(200-6+(200/(len(score_surfaces)+1)*i))-5))
	final_surface.blit(title_font.render(title, 0, (255,255,255)), (75,75)) #draw titles
	final_surface.blit(menu_font.render("High Scores: ", 0, (255,255,255)), (75,150))
	game_window.blit(final_surface, (0,0)) #dump final surface onto game window
	pygame.display.update() #update menu
	pygame.time.delay(150) #limit fps in menus
def menu_draw(selected, menu_list, title, game_window, score=0, title2=""): #draws a menu with a circle next to currently selected option
	global font
	title_font = pygame.font.Font(b64ToFile(font),48) #setup fonts of different sizes
	menu_font = pygame.font.Font(b64ToFile(font),24)
	font_surfaces =[title_font.render(title, 0, (255,255,255))] #create list of font renders
	final_surface = pygame.Surface((600,600)) #create temporary surface to blit font renders onto
	for i in range(len(menu_list)): #render all menu items
		if not i==selected%len(menu_list):font_surfaces.append(menu_font.render(menu_list[i], 0, (255,255,255)))
		else: font_surfaces.append(menu_font.render(menu_list[i], 0, (0,0,0))) #draw black text if selected
	pygame.draw.rect(final_surface, (255,255,255), (50, int(300+(300/(len(font_surfaces[1:])+1)*(selected%len(menu_list))))-12, 600, 31)) #highlight currently selected
	for i in range(len(font_surfaces[1:])): #blit menu items onto temp surface
		final_surface.blit(font_surfaces[1:][i], (75,int(300-6+(300/(len(font_surfaces[1:])+1)*i))-5))
	if not title2: final_surface.blit(font_surfaces[0], (75, 150)) #blit title onto temp surface
	else: final_surface.blit(font_surfaces[0], (75, 125)); final_surface.blit(title_font.render(title2, 0, (255,255,255)), (75, 175))
	if score:
		if not title2: final_surface.blit(menu_font.render("Score: "+str(score), 0, (255,255,255)),(75, 200)) #if there's a score to show, blit it into final_surface
		else: final_surface.blit(menu_font.render("Score: "+str(score), 0, (255,255,255)), (75,225))
	#pygame.draw.circle(final_surface, (255,255,255), (50, int(300+(300/(len(font_surfaces[1:])+1)*(selected%len(menu_list))))), 12, 0) #draw selection circle (old method)
	game_window.blit(final_surface, (0,0)) #dump final surface onto game window
	pygame.display.update() #update menu
	pygame.time.delay(150) #limit fps in menus
pac_highscores = scores_load() #load in the saved data
pygame.init() #init pygame
window = pygame.display.set_mode((600,600)) #create display, 600*600 originally picked for snake only but it works so whatever
dirs = { #store directions library (for snake)
'u':(0,-1),
'd':(0,1),
'l':(-1,0),
'r':(1,0),
'n':(0,0)
}
selected_option = 0 #setup menu variables
menu_items = ("Snake", "Pong", "Gender-Neutral Pac-Person", "Quit")
menu_loaded = 1
while menu_loaded:
	voice_pacman.stop()
	voice_ghosts.stop()
	menu_draw(selected_option, menu_items, "Games", window) #draw game selection menu
	snake_loaded = 0 #setup game load vars
	pong_loaded = 0
	gnpp_loaded = 0
	for ev in pygame.event.get(): #handle menu keypresses
		if ev.type==pygame.KEYDOWN:
			if ev.key==pygame.K_RETURN:
				if selected_option%len(menu_items)==len(menu_items)-1: scores_save(sorted(pac_highscores,reverse=1)[:5]);menu_loaded = 0 #quit program
				if selected_option%len(menu_items)==0: snake_cors=[()];snake_loaded=1;game_ran=0;in_game=0;selected_option=0;game_ran=0 #launch snake menu
				if selected_option%len(menu_items)==1: pong_loaded = 1; in_game = 0; selected_option=0; game_ran=0; #launch pong menu
				if selected_option%len(menu_items)==2: gnpp_loaded = 1; in_game = 0; selected_option=0; game_ran=0 #launch G-N P-P menu
			if ev.key==pygame.K_DOWN: selected_option+=1 #move selection
			if ev.key==pygame.K_UP: selected_option-=1
	while snake_loaded:
		if not game_ran: menu_draw(selected_option, ("Start Game", "Back"), "Snake", window) #draw main menu
		else: menu_draw(selected_option,("Play Again","Back"),"Game Over",window,len(snake_cors)-1) #draw game over screen if game has been played
		for ev in pygame.event.get(): #handle menu selection keypresses
			if ev.type==pygame.KEYDOWN:
				if ev.key==pygame.K_RETURN:
					if selected_option%2:snake_loaded=0; selected_option=0 #quit menu
					else: in_game=1;game_ran=1;snake_cors = [(12,12)];snake_cur_dir='n';food_pos = (rand(0,24), rand(0,24)) #start game
				if ev.key==pygame.K_DOWN: selected_option+=1 #move selections
				if ev.key==pygame.K_UP: selected_option-=1
		while in_game:
			snake_cors = snake_move(snake_cors, dirs[snake_cur_dir]) #move the snake
			if len(snake_cors)>=24**2: in_game=0 #end the game if you somehow manage to fill up the whole screen with snake.
			if snake_collision(snake_cors[1:], snake_cors[0]):in_game=0; #die if you hit yourself
			tempvar = snake_eat(snake_cors, food_pos) #check if snake has eaten anything
			if tempvar: #if snake has eaten food
				snake_cors = tempvar #set snake coors to output of snake_eat
				while snake_collision(snake_cors, food_pos):
					food_pos = (rand(0,24), rand(0,24)) #randomize food position when eaten until it appears outside the snake
			if snake_out_of_bounds(snake_cors): in_game=0; #die if you leave the screen
			snake_draw(window, snake_cors, food_pos) #draw the snake on screen
			pygame.time.delay(int(200/len(snake_cors)**0.25)+10) #delay by certain amount, speed up the longer the snake is. minimum val is ~57, max is ~240.
			for ev in pygame.event.get(): #handle keypress movement
				if ev.type==pygame.KEYDOWN: #change direction if it wouldnt kill you, and you arent moving there already
					if ev.key==pygame.K_LEFT and not dirs[snake_cur_dir][0]: snake_cur_dir = 'l';break
					if ev.key==pygame.K_RIGHT and not dirs[snake_cur_dir][0]: snake_cur_dir = 'r';break
					if ev.key==pygame.K_UP and not dirs[snake_cur_dir][1]: snake_cur_dir = 'u';break
					if ev.key==pygame.K_DOWN and not dirs[snake_cur_dir][1]: snake_cur_dir = 'd';break
					if ev.key==pygame.K_ESCAPE: in_game=0;break #quit game if you hit escape
	while pong_loaded:
		paddle_1_y=225;paddle_2_y=225;ball_pos=(300,225);p_1_score=0;p_2_score=0;ball_y_speed=0;ball_x_speed=0 #setup game variables
		if not game_ran: menu_draw(selected_option, ("1 Player", "2 Player", "Back"), "Pong", window) #Draw main menu
		if game_ran: menu_draw(selected_option, ("1 Player", "2 Player", "Back"), "Player "+str(game_ran)+" Wins!", window) #draw win screen after game ends
		for ev in pygame.event.get(): #handle menu selection buttonpresses
			if ev.type==pygame.KEYDOWN:
				if ev.key==pygame.K_RETURN:
					if selected_option%3==0: in_game=1; multi=0; selected_option = 0 #start game with different player amounts
					if selected_option%3==1: in_game=1; multi=1; selected_option = 0 #based on menu selection
					if selected_option%3==2: pong_loaded=0; selected_option =0 #quit menu
				if ev.key==pygame.K_UP: selected_option-=1 #move selections
				if ev.key==pygame.K_DOWN: selected_option+=1
		while in_game: #main loop for game
			for ev in pygame.event.get():
				if ev.type==pygame.KEYDOWN and ev.key==pygame.K_ESCAPE: in_game=0 #quit on esc
				if ev.type==pygame.KEYDOWN and ev.key==pygame.K_SPACE and ball_y_speed==0 and ball_x_speed==0:
					 ball_y_speed=rand(-5,5);ball_x_speed=(rand(0,1)-0.5)*20;dir=ball_x_speed/10;pong_sound.play() #move ball on space
			paddle_1_y+=pong_move(pygame.K_UP, pygame.K_DOWN)*8 #move right paddle with arrows
			if not multi: paddle_2_y+=pong_ai(paddle_2_y, ball_pos[1], ball_y_speed, 2) #move left paddle with either AI or WS
			else: paddle_2_y+=pong_move(pygame.K_w, pygame.K_s)*8
			if paddle_1_y<48: paddle_1_y=48 #prevent paddles from leaving screen
			if paddle_2_y<48: paddle_2_y=48
			if paddle_1_y>450-48:paddle_1_y=450-48
			if paddle_2_y>450-48:paddle_2_y=450-48
			ball_pos=(ball_pos[0]+ball_x_speed, ball_pos[1]+ball_y_speed) #move the ball
			if (ball_pos[1]>450-12 and ball_y_speed>0) or (ball_pos[1]<12 and ball_y_speed<0): ball_y_speed*=-1;pong_sound.play() #keep ball in bounds
			if ball_pos[0]<-12: p_1_score+=1;ball_pos=(300,225);ball_x_speed=0;ball_y_speed=0;paddle_1_y=225;paddle_2_y=225;pong_sound.play(3) #increment score if ball out of bounds
			if ball_pos[0]>612: p_2_score+=1;ball_pos=(300,225);ball_x_speed=0;ball_y_speed=0;paddle_1_y=225;paddle_2_y=225;pong_sound.play(3)
			if ball_pos[0]<=60 and ball_pos[0]>12 and ball_pos[1]-12<paddle_2_y+48 and ball_pos[1]+12>paddle_2_y-48 and dir==-1:
				ball_x_speed*=-1; ball_y_speed = (ball_pos[1]-paddle_2_y)/4.8; dir*=-1 #bounce off with angle from paddle 2
				pong_sound.play()
			if ball_pos[0]>=600-60 and ball_pos[0]<600-12 and ball_pos[1]-12<paddle_1_y+48 and ball_pos[1]+12>paddle_1_y-48 and dir==1:
				ball_x_speed*=-1; ball_y_speed = (ball_pos[1]-paddle_1_y)/4.8; dir*=-1 #bounce off with angle from paddle 1
				pong_sound.play()
			if p_1_score>10: game_ran=1; in_game=0 #end the game if score is above 10
			if p_2_score>10: game_ran=2; in_game=0
			if in_game: #only draw when game isnt won. fixes some stupid bug.
				pong_draw(window, paddle_1_y, paddle_2_y, ball_pos, p_1_score, p_2_score) #draw window
				pygame.time.delay(16) #run at as close to 60fps as i could get
	while gnpp_loaded:
		level = ( #stores the level as a tuple of strings
		"<============><============>", #, = top left corner
		"]            []            [", #~ = top right corner
		"] ,__~ ,___~ [] ,___~ ,__~ [", #_ = bottom half
		"] [xx] [xxx] [] [xxx] [xx] [", #= = top half
		"] `==' `===' `' `===' `==' [", #` = bottom left corner
		"]                          [", #' = bottom right corner
		"] ,__~ ,~ ,______~ ,~ ,__~ [", #[ = left half
		"] `==' [] `==><==' [] `==' [", #] = right half
		"]      []    []    []      [", #g = ghost only
		"\____~ [\__~ [] ,__/] ,____/", #x = filler
		"xxxxx] [<=='^`'^`==>] [xxxxx",
		"xxxxx] []          [] [xxxxx",
		"xxxxx] [] ,__--__~ [] [xxxxx",
		"=====' `' [gggggg] `' `=====",
		"          [gggggg]          ", # < = ,
		"_____~ ,~ [gggggg] ,~ ,_____", # > = ~
		"xxxxx] [] `======' [] [xxxxx", # \ = `
		"xxxxx] []          [] [xxxxx", # / = '
		"xxxxx] [] ,______~ [] [xxxxx", # [ = ]
		"<====' `' `==><==' `' `====>", # ] = [
		"]            []            [", # = = _
		"] ,__~ ,___~ [] ,___~ ,__~ [", # _ = =
		"] `=>] `==='^`'^`===' [<=' [", #i'm gonna pretend all these different symbols are for pathfinding.
		"]   []                []   [", #because they're all the same and i could've just used 4.
		"\_~ [] ,~ ,______~ ,~ [] ,_/",
		"<=' `' [] `==><==' [] `' `=>",
		"]      []    []    []      [",
		"] ,____/\__~ [] ,__/\____~ [",
		"] `========' `' `========' [",
		"]                          [", #coords stored as [y][x]
		"\__________________________/") #this took ages
		pellets = [ #stores the state of pellets as a list of arrays
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0],
		[0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0],
		[0,2,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,2,0],
		[0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0],
		[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
		[0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0],
		[0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0],
		[0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
		[0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0],
		[0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0],
		[0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0],
		[0,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,0],
		[0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0],
		[0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0],
		[0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0],
		[0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0],
		[0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0],
		[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
		pellets_reset = [x[:] for x in pellets] #clone 2d array
		pac_directions = ((1,0),(0,-1),(-1,0),(0,1),(0,0)) #directions stored in tuple
		voice_ghosts.stop()
		voice_pacman.stop()
		if not game_ran: menu_draw(selected_option, ("Start Game", "Back"), "Gender-Neutral", window, 0, "Pac-Person")
		else: highscore_draw(selected_option, ("Play Again", "Back"), "Game Over", window, pac_score, pac_highscores) #Draw menus
		for ev in pygame.event.get(): #Get keydowns
			if ev.type==pygame.KEYDOWN:
				if ev.key==pygame.K_RETURN: #select an option
					if selected_option%2: gnpp_loaded=0; selected_option=0; #quit
					else: in_game=1;pac_grid=(13.5,23);pac_frame_count=0;pac_dir=0;tmp_dir=0;x_off=0;y_off=0;old_dir=0;pac_dead=0;pac_score=0;pac_fruit=0;pac_fruit_done=0;\
					ghost_dir=[0,-1,-1,-1];ghost_grid=[(14,11),(13,14),(14,14),(15,14)];ghost_tmp_grid=ghost_grid[:];ghost_frame_count=0;pac_lives=2;pac_level=0;\
					ghost_scared=[0,0,0,0];ghost_dead=[0,0,0,0];ghost_x_off=[0,0,0,0];ghost_y_off=[0,0,0,0];ghost_scared_time=-1;ghost_speed=[0,0,0,0]#setup starting vars, and start.
				if ev.key==pygame.K_UP: selected_option-=1 #move selection
				if ev.key==pygame.K_DOWN: selected_option+=1
		while in_game:
			if pac_lives<1: #end game if less than 1 lives
				game_ran=1;in_game=0;voice_pacman.stop();voice_ghosts.stop();pac_highscores.append(pac_score)
			if pac_grid == (13.5,23) and not pac_level: #play the intro stuff, blank level and intro sound basically
				gnpp_draw(window, level, pellets, (-100,-100), 0, -1, (-100,-100), 0, -100, [0,0,0,0], [0,0,0,0], 0, pac_sprite, ghost_sprite, 2, 0, 0) #draw level
				pac_sound["intro"].play()
				pygame.time.delay(4370)
			elif pac_grid == (13.5,23):
				pygame.time.delay(1000)
			try: pac_counter+=1
			except: pac_counter=0
			if pac_counter>10000: pac_counter = 10000
			if not voice_ghosts.get_busy():  #play ghost sounds
				voice_ghosts.play(pac_sound["ghost1"],-1)
			if sum(ghost_scared) and not sum(ghost_dead) and not voice_ghosts.get_sound()==pac_sound["ghost4"]:
				voice_ghosts.play(pac_sound["ghost4"],-1)
			if sum(ghost_dead) and not voice_ghosts.get_sound()==pac_sound["ghost5"]:
				voice_ghosts.play(pac_sound["ghost5"],-1)
			if not sum(ghost_dead) and not sum(ghost_scared) and voice_ghosts.get_sound() in (pac_sound["ghost4"],pac_sound["ghost5"]):
				voice_ghosts.play(pac_sound["ghost1"],-1)
			ghost_frame_count=(ghost_frame_count+1/(60/4))%2 #animate ghosts
			ghost_frame=int(ghost_frame_count)-1
			try: #decrement pac fruit timer if exists, else create it
				if pac_fruit_timer:
					pac_fruit_timer-=1
				else: pac_fruit=0
			except: pac_fruit_timer=0
			if (sum(map(sum,pellets)) in (170,169,171) and not pac_fruit_done==1)or(sum(map(sum,pellets)) in (70,69,71) and not pac_fruit_done==2): #decide when to put the pac_fruit in
				pac_fruit=min(1+pac_level,8)
				pac_fruit_timer = 540+rand(0,60)
				pac_fruit_done+=1
			if not pac_dead:
				pac_frame_count=((pac_frame_count*10+2.75)%40)/10 #animate pacman mouth
				pac_frame=int(pac_frame_count)
				if pac_frame==3: pac_frame=1 #close the mouth back instead of screwing the animation up
				if pac_dir==-1: pac_frame=0
			else: #stop ghosts, play pacman kill animation, reset game
				try: play_once+=0
				except: play_once=0
				pac_frame+=0.1;pac_fruit=0;ghost_dir=[-1,-1,-1,-1];ghost_frame=0;voice_ghosts.stop();ghost_dead=[0,0,0,0];ghost_scared=[0,0,0,0];ghost_dir=[0,-1,-1,-1];tmp_dir=0
				if not pac_grid == (13.5,23) and pac_frame>9.4: pac_grid=(13.5,23);ghost_grid=[(14,11),(13,14),(14,14),(15,14)];pac_dead=0;pac_lives-=1;voice_pacman.stop();\
				x_off=0;y_off=0;ghost_x_off=[0,0,0,0];ghost_y_off=[0,0,0,0];play_once=0
				if not voice_pacman.get_sound()==pac_sound["dead"] and pac_dead and not play_once: play_once=1;voice_pacman.play(pac_sound["dead"]);pygame.time.delay(128)
			for ev in pygame.event.get():
				if ev.type==pygame.KEYDOWN: #get keyboard input
					if ev.key==pygame.K_ESCAPE: in_game=0;voice_ghosts.stop();voice_pacman.stop() #exit game
					if ev.key==pygame.K_RIGHT: tmp_dir = 0 #temp vars to allow switching dirs when aligned to grid
					if ev.key==pygame.K_UP and pac_grid[0]==int(pac_grid[0]): tmp_dir = 1 #prevent going up/down on game start
					if ev.key==pygame.K_LEFT: tmp_dir = 2
					if ev.key==pygame.K_DOWN and pac_grid[0]==int(pac_grid[0]): tmp_dir = 3
			#obvious bug in this next if statement, not gonna fix, it's a "feature" now.
			if not (x_off or y_off) or ((not (abs(x_off)-min(4,abs(x_off)) or abs(y_off)-min((4,abs(y_off))))) and pac_dir!=tmp_dir) and not pac_dead: #turn at next intersection, allow corner cutting.
				next_pos = (int(pac_grid[0]+pac_directions[tmp_dir][0]/1),int(pac_grid[1]+pac_directions[tmp_dir][1])) #get the next position val$
				if next_pos[0]>=28: next_pos = (0, next_pos[1]) #fix index range errors
				if next_pos[0]<=-1: next_pos = (27, next_pos[1])
				if (level[next_pos[1]][next_pos[0]] in ("^"," ","s")) and not pac_dead:
					pac_dir = tmp_dir #perform next movement at grid align, if it wouldnt run into a wall
					old_dir = pac_dir
				#else: tmp_dir = pac_dir #make the game need more precise inputs, optional, i dont use this.
				if pac_dir==0: x_off =-16; y_off =  0 #set values to move smoothly
				elif pac_dir==1: x_off =  0; y_off = 16
				elif pac_dir==2: x_off = 16; y_off =  0
				elif pac_dir==3: x_off =  0; y_off =-16
				if pac_grid[0]==int(pac_grid[0]) and not pac_dead: #align to grid after game started
					try: 
						if pellets[int(pac_grid[1])][int(pac_grid[0])]==1: #add points
							pac_score+=10
						if pellets[int(pac_grid[1])][int(pac_grid[0])]==2: #set ghost to scared, add points
							pac_score+=50
							ghost_scared=[x==0 for x in ghost_dead]
							ghost_scared_time = 600/(pac_level+1)**0.5 #decrease ghost scared time each level
							ghost_dir = [(x-2)%4 for x in ghost_dir]
						if pellets[int(pac_grid[1])][int(pac_grid[0])]: #if there's a pellet thing
							if not voice_pacman.get_busy(): #and nothing's playing
								voice_pacman.play(pac_sound["eat"],-1) #play the wakawaka sound
						else: voice_pacman.stop()
					except: print("",end="")
					try: pellets[int(pac_grid[1])][int(pac_grid[0])] = 0; #eat pellets basically
					except: print("",end="") #do absolutely nothing if it errors because who cares.
					next_pos = (int(pac_grid[0]+pac_directions[pac_dir][0]/1),int(pac_grid[1]+pac_directions[pac_dir][1])) #get the next position val$
					if next_pos[0]>=28: next_pos = (0, next_pos[1]) #fix index range errors
					if next_pos[0]<=-1: next_pos = (27, next_pos[1])
					if not (level[next_pos[1]][next_pos[0]] in ("^"," ","s")): #stop moving if a wall
						if pac_dir>-1: old_dir = pac_dir;
						pac_dir = -1; x_off = 0; y_off = 0
					else: #otherwise move forwards (without index out of range fixes)
						pac_grid = (pac_grid[0]+pac_directions[pac_dir][0]/1,pac_grid[1]+pac_directions[pac_dir][1])
				else: #center pacman on game start (this broke absolutely everything at first)
					pac_grid = (pac_grid[0]+pac_directions[pac_dir][0]/2,pac_grid[1]+pac_directions[pac_dir][1]) #move forwards by half a tile
					if pac_dir==0: x_off = -8; y_off = 0 #set offset values to half of normal
					elif pac_dir==2: x_off = 8 ; y_off = 0
			elif not pac_dead: #move pacman through the grid smoothly
				if x_off>0: x_off-=2
				if x_off<0: x_off+=2
				if y_off>0: y_off-=2
				if y_off<0: y_off+=2
			if pac_grid[0]>28: pac_grid = (0, pac_grid[1]) #loop around when going though the side
			if pac_grid[0]<-1: pac_grid = (28, pac_grid[1])
			ghost_letter_dirs={3:'u',1:'d',2:'r',0:'l','u':1,'d':3,'r':0,'l':2}
			ghost_pos=[0,0,0,0]
			pac_pos = (pac_grid[0]*16-3+x_off,pac_grid[1]*16-3+y_off) #get actual position of pacman from grid coords
			for i in range(4): #ghost movement code
				if pac_dead: break
				if ghost_grid[i][0]>28: ghost_grid[i] = ( 0,14) #loop around when going though the side
				if ghost_grid[i][0]<-1: ghost_grid[i] = (28,14)
				if ghost_scared[i]: ghost_speed[i]=4 #lower ghost speed when scared
				elif ghost_grid[i][1]==14 and (ghost_grid[i][0]<6 or ghost_grid[i][0]>21): ghost_speed[i]=6 #lower ghost speed in side paths
				elif ghost_dead[i]: ghost_speed[i]=-4 #increase dead ghost speed
				else: ghost_speed[i]=0 #reset ghost speed
				temp_bool = gnpp_get_lvl_bool(level)
				temp_graph = gnpp_get_lvl_graph(temp_bool) #setup temp vars for intersection checking
				connections = ""
				try:
					for val in temp_graph[(ghost_grid[i][1],ghost_grid[i][0])]: #get open sides at position
						connections=connections+val[0]
				except: print("",end="") #do nothing on error
				if connections not in ("du","ud","lr","rl") and len(connections)>1 and not(ghost_x_off[i] or ghost_y_off[i]): can_change_dir=1 #check if at an intersection/dead end
				else: can_change_dir=0
				if ghost_grid[i] in ((15,11),(12,11),(15,23),(12,23)) and ghost_dir[i] in (3,1): can_change_dir=1;connections = connections+" "
				if ghost_grid[i] in ((14,11),(13,11)) and not ghost_dir in (3,1): connections = "lr " #special coord handling
				if not (ghost_dead[i] or ghost_scared[i] or pac_dead):
					if i==0: #red ghost logic, target directly
						if can_change_dir:
							if len(connections)==2:
								try: ghost_dir[i]=ghost_letter_dirs[connections[connections.index(ghost_letter_dirs[ghost_dir[i]])-1]]
								except: print("",end="")
							elif gnpp_get_ghost_mode(pac_level,pac_counter):
								ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(int(pac_grid[0]),int(pac_grid[1]))),ghost_dir[i])
							else: #loop around corner in "scatter" mode
								ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(40,-1)),ghost_dir[i])
					if i==1: #blue ghost logic, target opposite side of red. includes overflow "bug" when pointing pacman up
						if ((pac_level==0 and (sum(map(sum, pellets)))<210) or (pac_level!=0)):
							target_pos = (int(((-1*(pac_dir==1))+pac_grid[0]+pac_directions[old_dir][0])+(pac_grid[0]-ghost_grid[0][0])),\
							int((pac_grid[1]+pac_directions[old_dir][1])+(pac_grid[1]-ghost_grid[0][1])))
							target_pos = gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),target_pos)
							if can_change_dir:
								if len(connections)==2:
									try: ghost_dir[i]=ghost_letter_dirs[connections[connections.index(ghost_letter_dirs[ghost_dir[i]])-1]]
									except: ghost_dir[i]=-1
								elif gnpp_get_ghost_mode(pac_level,pac_counter):
									ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],target_pos,ghost_dir[i])
								else: #loop around corner in "scatter" mode
									ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(40,40)),ghost_dir[i])
						else: #stay in the ghost houses
							if ghost_grid[i]==(13,13): ghost_dir[i] = 3
							elif ghost_grid[i]==(13,15): ghost_dir[i]=1
							elif ghost_dir[i]==-1: ghost_dir[i] = 3
					if i==2: #pink ghost logic, target 4 tiles ahead of pacman, includes overflow "bug" when pointing up
						tmp_ghost_dir = ghost_dir[i]
						if can_change_dir:
							if len(connections)==2:
								ghost_dir[i]=ghost_letter_dirs[connections[connections.index(ghost_letter_dirs[ghost_dir[i]])-1]]
							elif gnpp_get_ghost_mode(pac_level,pac_counter):
								target_pos = gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),((int((-4*(pac_dir==1))+pac_grid[0]+(pac_directions[old_dir][0]*4)),int(pac_grid[1]+(pac_directions[old_dir][1]*4)))))
								ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],target_pos,ghost_dir[i])
								if ghost_dir[i]==-1: #keep moving even when at target position
									ghost_dir[i]=gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),pac_grid),ghost_dir[i])
							else: #loop around corner in "scatter" mode
								ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(-1,-1)),ghost_dir[i])
					if i==3: #clyde logic. run up to pacman, then run to the bottom left corner once within 8 "tiles"
						if ((pac_level==0 and (sum(map(sum, pellets)))<150) or (pac_level!=0 and (sum(map(sum, pellets)))<180)):
							if can_change_dir:
								if len(connections)==2:
									ghost_dir[i]=ghost_letter_dirs[connections[connections.index(ghost_letter_dirs[ghost_dir[i]])-1]]
								elif gnpp_get_ghost_mode(pac_level,pac_counter):
									if (abs(pac_grid[0]-ghost_grid[i][0])**2+abs(pac_grid[1]-ghost_grid[i][1])**2)*0.5>8:
										ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(int(pac_grid[0]),int(pac_grid[1]))),ghost_dir[i])
									else:
										ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(int(0),int(len(level)))),ghost_dir[i])
								else:#loop around corner in "scatter" mode
									ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(-1,40)),ghost_dir[i])
						else: #stay in the ghost house
							if ghost_grid[i]==(15,13): ghost_dir[i] = 3
							elif ghost_grid[i]==(15,15): ghost_dir[i]=1
							elif ghost_dir[i]==-1: ghost_dir[i] = 3
				elif ghost_dead[i] and can_change_dir: #dead ghost pathfinding logic. run to this one spot in the "ghost house"
					ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],(int(12+i),14),ghost_dir[i])
					if ghost_dir[i]==-1: ghost_dead[i]=0
				elif ghost_scared[i] and can_change_dir: #scared ghost pathfinding logic, head to the side opposite of pacman, or stay in the ghost house if already in it
					if len(connections)==2:
						try: ghost_dir[i]=ghost_letter_dirs[connections[connections.index(ghost_letter_dirs[ghost_dir[i]])-1]]
						except: print("",end="")
					else:
						target_pos = (int((14)+(14-pac_grid[0])),int((15)+(15-pac_grid[1])))
						if (i==3 and ((pac_level==0 and (sum(map(sum, pellets)))<150) or (pac_level!=0 and (sum(map(sum, pellets)))<180))) or\
						(i==1 and ((pac_level==0 and (sum(map(sum, pellets)))<210) or (pac_level!=0))) or (i==0 or i==2):
							ghost_dir[i] = gnpp_pathfind_astar(level,ghost_grid[i],gnpp_closest_valid_coord(gnpp_get_lvl_bool(level,0),(target_pos)),ghost_dir[i])
						else:
							if i==3:
								if ghost_grid[i]==(15,13): ghost_dir[i] = 3
								elif ghost_grid[i]==(15,15): ghost_dir[i]=1
								elif ghost_dir[i]==-1: ghost_dir[i] = 3
							if i==1:
								if ghost_grid[i]==(13,13): ghost_dir[i] = 3
								elif ghost_grid[i]==(13,15): ghost_dir[i]=1
								elif ghost_dir[i]==-1: ghost_dir[i] = 3
				if not (int(ghost_x_off[i]) or int(ghost_y_off[i])) and not pac_dead:
					if   ghost_dir[i]==0: ghost_x_off[i] =-16-ghost_speed[i]; ghost_y_off[i] =  0 #set values to move smoothly
					elif ghost_dir[i]==1: ghost_x_off[i] =  0; ghost_y_off[i] = 16+ghost_speed[i]
					elif ghost_dir[i]==2: ghost_x_off[i] = 16+ghost_speed[i]; ghost_y_off[i] =  0
					elif ghost_dir[i]==3: ghost_x_off[i] =  0; ghost_y_off[i] =-16-ghost_speed[i]
					ghost_grid[i] = (ghost_grid[i][0]+pac_directions[ghost_dir[i]][0],ghost_grid[i][1]+pac_directions[ghost_dir[i]][1])
				elif not pac_dead: #move ghosts smoothly
					if ghost_x_off[i]>0: ghost_x_off[i]-=2
					if ghost_x_off[i]<0: ghost_x_off[i]+=2
					if ghost_y_off[i]>0: ghost_y_off[i]-=2
					if ghost_y_off[i]<0: ghost_y_off[i]+=2
				#get actual position of ghosts from grid pos
				ghost_pos[i]=(ghost_grid[i][0]*16-3+ghost_x_off[i]*(16/(ghost_speed[i]+16)),ghost_grid[i][1]*16-3+ghost_y_off[i]*(16/(ghost_speed[i]+16)))
				if (abs(pac_pos[0]-ghost_pos[i][0])**2+abs(pac_pos[1]-ghost_pos[i][1])**2)**0.5<4: #eat a ghost/kill pacman
					if ghost_scared[i]:
						if sum(ghost_scared)==4:
							pac_score+=200
						elif sum(ghost_scared)==3:
							pac_score+=400
						elif sum(ghost_scared)==2:
							pac_score+=800
						elif sum(ghost_scared)==1:
							pac_score+=1600
						ghost_dead[i]=1;ghost_scared[i]=0;pac_sound["eat_ghost"].play();pygame.time.delay(128)
					elif not ghost_dead[i]: pac_dead=1
				if (abs(pac_pos[0]-(213,269)[0])**2+abs(pac_pos[1]-(213,269)[1])**2)**0.5<4 and pac_fruit: #eat the fruit
					if pac_fruit == 1: pac_score+=100
					elif pac_fruit == 2: pac_score+=300
					elif pac_fruit == 3: pac_score+=500
					elif pac_fruit == 4: pac_score+=700
					elif pac_fruit == 5: pac_score+=1000
					elif pac_fruit == 5: pac_score+=2000
					elif pac_fruit == 6: pac_score+=3000
					elif pac_fruit == 7: pac_score+=5000
					pac_fruit = 0
					pac_sound["eat_bonus"].play()
					pygame.time.delay(128)
			ghost_scared_time-=1 #count down scared time
			if ghost_scared_time<1: ghost_scared=[0,0,0,0]; #reset ghosts on scared time end
			if ghost_scared_time<97 and ghost_scared_time>0: ghost_flash = (int(ghost_scared_time/8)%2); #flash ghosts white/blue when scared time almost over
			else: ghost_flash = 0
			if (sum(map(sum, pellets))) and pac_lives: #draw level normally if the game is running
				gnpp_draw(window, level, pellets, pac_pos, pac_frame, pac_dir, ghost_pos, ghost_frame, ghost_dir, ghost_dead, ghost_scared, ghost_flash, pac_sprite, ghost_sprite, pac_lives, pac_score, pac_fruit) #draw level
			else: #if level is complete, dont draw ghosts/pacman/fruit, blink the level 4 times, reset the pellets, and increment the level counter
				pac_fruit=0
				voice_pacman.stop()
				voice_ghosts.stop()
				try: pac_level_flash+=1
				except: pac_level_flash=0
				gnpp_draw(window, level, pellets, (-100,-100), pac_frame, pac_dir, (-100,-100), ghost_frame, ghost_dir, ghost_dead, ghost_scared, ghost_flash, pac_sprite, ghost_sprite, pac_lives, pac_score, pac_fruit, int(pac_level_flash/15)%2) #draw level
				if pac_level_flash>15*8: #reset vars and start the game
					pac_counter=0
					pac_level_flash=0
					pac_fruit_done = 0
					if not pac_level: pac_lives+=1
					pac_level+=1
					pac_grid=(13.5,23);pac_frame_count=0;pac_dir=0;tmp_dir=0;x_off=0;y_off=0;old_dir=0;pac_dead=0;ghost_speed=[0,0,0,0];\
					ghost_dir=[0,-1,-1,-1];ghost_grid=[(14,11),(13,14),(14,14),(15,14)];ghost_tmp_grid=ghost_grid[:];ghost_frame_count=0;\
					ghost_scared=[0,0,0,0];ghost_dead=[0,0,0,0];ghost_x_off=[0,0,0,0];ghost_y_off=[0,0,0,0];ghost_scared_time=-1
					pellets = [x[:] for x in pellets_reset]
			pygame.time.delay(12) #run at as close to 60fps as you can get with integer ms values
pygame.quit()
